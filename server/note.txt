function areAnagrams(str1, str2) {
  // Helper function to clean and sort a string
  function cleanString(str) {
    return str.replace(/[^\w]/g, '').toLowerCase().split('').sort().join('');
  }

  // Clean and sort both strings
  const cleanedStr1 = cleanString(str1);
  const cleanedStr2 = cleanString(str2);

  // Compare the cleaned and sorted strings
  return cleanedStr1 === cleanedStr2;
}

// Examples
console.log(areAnagrams('listen', 'silent')); // true
console.log(areAnagrams('hello', 'world'));   // false
console.log(areAnagrams('rail safety', 'fairy tales')); // true
console.log(areAnagrams('dormitory', 'dirty room'));   // true


exports.sendEmail = async (req, res) => {
  const otp = Math.floor(Math.random() * 900000) + 100000;
  try {
    const { email } = req.body;
    const mailOptions = {
      from: process.env.EMAIL_FROM,
      to: email,
      subject: 'Email Verification',
      text: `Your verification OTP is ${otp}`, // Adding plain text version
      html: `
      <div style="font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 20px;">
        <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
          <div style="background-color: #007BFF; color: #ffffff; padding: 10px; border-radius: 8px 8px 0 0; text-align: center;">
            <h1 style="margin: 0;">OTP Verification</h1>
          </div>
          <div style="padding: 20px; line-height: 1.6;">
            <p>Dear User,</p>
            <p>Your One-Time Password (OTP) for verifying your email address is:</p>
            <h2 style="background-color: #f4f4f4; padding: 10px; border-radius: 5px; text-align: center;">${otp}</h2>
            <p>Please enter this OTP to complete your email verification. This OTP is valid for <b>5 MINUTES</b>.</p>
            <p>Best regards,<br/>D watch.com Team</p>
          </div>
        </div>
      </div>
      `,
    };

    await transporter.sendMail(mailOptions, (err, info) => {
      if (err) {
        res.status(403).json(err);
      } else {
        const salt =  bcrypt.genSalt(10);
    const hashedOtp =  bcrypt.hash(otp.toString(), salt);

    const newVerification =  new emailSchema({
      userId: _id,
      email,
      otp,
      createdAt: Date.now(),
      expiresAt: Date.now() + 300000, // Set expiration time 5 minutes from now
    });
    newVerification.save()
        res.status(200).json({ OTP: otp });
      }
    });
  } catch (err) {
    console.error('Error sending email:', err);
    res.status(500).json('Error sending email');
  }
};
